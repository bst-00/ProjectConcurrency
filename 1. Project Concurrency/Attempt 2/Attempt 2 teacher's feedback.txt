The solution comes without a join, so the printout of the mini test is run before the end, making the assignment insufficient. The init of the threads is in the start functions, this will create a pseudo-sequential start. To avoid this, the init should have been placed in the creation of the cooks/clients. Cooks and clients lack the synchronization system discussed with producers/consumers, so they have a spinning mechanism to get the resource, but they lock it for no reason a number of times. Plus, they have overlocking, while the threads are locking the resource, the thread is taking a nap on an I/O request. Even more: the clients add sleep that is not required nor requested to waste time to have more probability to access the resource.
